#------------------------------------------------------------------------------
# Loads the values of important JOBRUNNER system environment variables into the
# current job as well as the process' environment.  Here's the list of variables
# we're currently loading:
#
#   NF_REPOS
# 
#   NF_BUILD
#   NF_CACHE
#   NF_CODEDOC
#   NF_ROOT
#   NF_SAMPLES_CADENCE
#   NF_SNIPPETS
#   NF_TEMP
#   NF_TEST
#   NF_TOOLBIN
# 
#   NC_ACTIONS_ROOT
#   NC_BUILD
#   NC_CACHE
#   NC_NUGET_DEVFEED
#   NC_NUGET_VERSIONER
#   NC_REPOS
#   NC_ROOT
#   NC_TEMP
#   NC_TEST
#   NC_TOOLBIN
#
# GitHub workflows don't seem to load host environment variables into the [env]
# context.  This is probably a good idea in general because this prevents workflows
# from taking depedencies on the hosting environment.
#
# This is a problem though for neonFORGE projects because our build scripts rely
# on environment variables and we've configured these on our self-hosted runners.
#
# This action loads obtains the environment variables above directly from the
# system/user registries or via APIs in special cases (like COMPUTERNAME) and
# then adds these to the current job process as environment variables so they'll
# be available to all job steps.
#
# This action also sets the MASTER_PASSWORD environment variable to the 
# [master-password] when a value is passed.  The MASTER_PASSWORD environment 
# variable is used by the underlying Powershell deployment scripts to access the
# current user's 1Password secrets on headless jobrunner machines.

name: neon-environment
description: Loads important JOBRUNNER system environment variables into the current job.
inputs:
  master-password:
    description: Specifies master 1Password to override [secrets.DEVBOT_MASTER_PASSWORD].
    required: false
runs:
  using: composite
  steps:
  - shell: pwsh
    run: |
      
      # Loads a user or system environment variable into the current job process.
      function LoadVariable
      {
          [CmdletBinding()]
          param (
              [Parameter(Position=0, Mandatory=1)]
              [string]$variable
          )
          
          $value = [System.Environment]::GetEnvironmentVariable($variable)
          
          if ([System.String]::IsNullOrEmpty($value))
          {
             throw "The [$variable] environment variable does not exist."
          }
          
          Write-Output "$variable=$value" >> $env:GITHUB_ENV
      }
      
      # COMPUTERNAME is a special case
      
      $computername = [System.Net.Dns]::GetHostName()
      Write-Output "COMPUTERNAME=$computername" >> $env:GITHUB_ENV
      
      # Load the environment variables
      
      LoadVariable NF_REPOS

      LoadVariable NF_BUILD
      LoadVariable NF_CACHE
      LoadVariable NF_CODEDOC
      LoadVariable NF_ROOT
      LoadVariable NF_SAMPLES_CADENCE
      LoadVariable NF_SNIPPETS
      LoadVariable NF_TEMP
      LoadVariable NF_TEST
      LoadVariable NF_TOOLBIN
 
      LoadVariable NC_ACTIONS_ROOT
      LoadVariable NC_BUILD
      LoadVariable NC_CACHE
      LoadVariable NC_NUGET_DEVFEED
      LoadVariable NC_NUGET_VERSIONER
      LoadVariable NC_REPOS
      LoadVariable NC_ROOT
      LoadVariable NC_TEMP
      LoadVariable NC_TEST
      LoadVariable NC_TOOLBIN
      
      # Set the master 1Password environment variable
      
      $masterPassword = ${{ inputs.master-password }}
      
      if (![System.String]::IsNullOrEmpty($masterPassword))
      {
          [System.Environment]::SetEnvironmentVariable("MASTER_PASSWORD", $masterPassword)
      }
      
